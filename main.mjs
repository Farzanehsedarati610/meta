import crypto from 'crypto';
const key = "9f3c2a7e8d4b1c6f0a2d3e4f5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2a3b4c"; // Shared HMAC-SHA256 key
export const entries =
[
  ["084003997", "727762681039763", "041215663", "1298861419215"],
  ["084003997", "727762682039763", "041215663", "1298861419215"],
  ["084003997", "727762683039763", "041215663", "1298861419215"],
  ["084003997", "727762684039763", "041215663", "1298861419215"],
  ["084003997", "727762685039763", "041215663", "1298861419215"],
  ["084003997", "727762686039763", "041215663", "1298861419215"],
  ["084003997", "727762687039763", "041215663", "1298861419215"],
  ["084003997", "727762688039763", "041215663", "1298861419215"],
  ["084003997", "727762689039763", "041215663", "1298861419215"],
  ["074900356", "727762683000000", "041215663", "1298861419215"],
  ["074900356", "7277626800039763", "041215663", "1298861419215"],
  ["074900356", "727762684000000", "041215663", "1298861419215"]
].forEach((t, i) => {
  let a = t[0]; // Routing or symbolic origin
  let b = t[1]; // Account or ledger ID
  let d = t[2]; // Destination overlay
  let e = t[3]; // Timestamp or forensic ledger entry
  let c = i < 9 ? 232000000 : 1500000; // Transaction amount
  let m = `${a}:${b}=>${d}:${e}:${c}`; // Full symbolic message
  let h = crypto.createHmac("sha256", key).update(m).digest("hex"); // HMAC-SHA256 hash
  console.log(`[${new Date().toISOString()}] ${a} → ${d} | ${b} → ${e} | $${c} | HMAC: ${h}`);
});
